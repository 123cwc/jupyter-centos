#!/bin/bash

WORKDIR=/root
SRC=src
BUILD=build
SRCDIR=$WORKDIR/$SRC
BUILDDIR=$WORKDIR/$BUILD
PATCHDIR=$WORKDIR/.cpp
PREFIX=/usr/local
LIBDIR=$PREFIX/lib
BINDIR=$PREFIX/bin
INCLUDEDIR=$PREFIX/include

pushd $WORKDIR

# Build instructions based on those at https://github.com/root-mirror/cling

# Get source
min-apk git
cd $WORKDIR
git clone http://root.cern.ch/git/llvm.git $SRC
cd $SRCDIR
git checkout cling-patches
cd $SRCDIR/tools
git clone http://root.cern.ch/git/cling.git
git clone http://root.cern.ch/git/clang.git
cd $SRCDIR/tools/clang
git checkout cling-patches

# Apply our patches
cd $SRCDIR
patch -p1 < $PATCHDIR/alpine-llvm-patches
cd $SRCDIR/tools/cling
patch -p1 < $PATCHDIR/cling-kernel-patches

# Configure with options to minimize size.
# Need these CXXFLAGS to get it to compile.
export CXXFLAGS="-fpermissive -D_GLIBCXX_USE_CXX11_ABI=0"
cd $WORKDIR
mkdir $BUILD
cd $BUILDDIR
$SRCDIR/configure \
  --prefix=$PREFIX \
  --enable-optimized \
  --enable-cxx1y \
  --enable-targets=host \
  --disable-docs \
  --disable-doxygen \
  --disable-debug-symbols \
  --disable-keep-symbols \
  --disable-clang-arcmt \
  --disable-clang-plugin-support \
  --disable-clang-static-analyzer
# Build only llvm, clang, and cling.
# cling depends on a generated file inside clang, but the dependency isn't
# specified in the Make system, so build clang by itself first.
make -j4 ONLY_TOOLS="clang" BUILD_EXAMPLES=0
make -j4 ONLY_TOOLS="clang cling" BUILD_EXAMPLES=0
make -j4 ONLY_TOOLS="clang cling" BUILD_EXAMPLES=0 install

# The cling configure/make system doesn't build the Jupyter kernel shared library.
# These commands were generated with the cmake build system and cleaned up a bit.
cd $SRCDIR/tools/cling/tools/Jupyter

/usr/bin/c++ -DCLING_INCLUDE_PATHS=\"$INCLUDEDIR:$SRCDIR/tools/cling/include:$SRCDIR/tools/cling/../clang/include:$SRCDIR/tools/cling/../../include\" -DCLING_VERSION="ROOT_0.2~dev" -DGTEST_HAS_RTTI=0 -D_GNU_SOURCE -D__STDC_CONSTANT_MACROS -D__STDC_FORMAT_MACROS -D__STDC_LIMIT_MACROS -I$BUILDDIR/tools/cling/tools/Jupyter -I$SRCDIR/tools/cling/tools/Jupyter -I$SRCDIR/tools/cling/include -I$BUILDDIR/tools/cling/include -I$SRCDIR/tools/cling/../clang/include -I$BUILDDIR/tools/cling/../clang/include -I$SRCDIR/tools/cling/../llvm/src/tools/clang/include -I$BUILDDIR/tools/cling/../llvm/src/tools/clang/include -I$BUILDDIR/include -I$SRCDIR/include  -fpermissive -D_GLIBCXX_USE_CXX11_ABI=0  -fPIC -fvisibility-inlines-hidden -Wall -W -Wno-unused-parameter -Wwrite-strings -Wcast-qual -Wno-missing-field-initializers -pedantic -Wno-long-long -Wno-maybe-uninitialized -Wnon-virtual-dtor -Wno-comment -std=c++11 -ffunction-sections -fdata-sections -fno-common -Woverloaded-virtual -Wcast-qual -fno-strict-aliasing -pedantic -Wno-long-long -Wall -W -Wno-unused-parameter -Wwrite-strings -Wno-unused-local-typedefs -fPIC   -fno-rtti -fno-exceptions -fno-rtti -o Kernel.cpp.o -c Kernel.cpp

/usr/bin/c++  -fPIC -fpermissive -D_GLIBCXX_USE_CXX11_ABI=0  -fPIC -fvisibility-inlines-hidden -Wall -W -Wno-unused-parameter -Wwrite-strings -Wcast-qual -Wno-missing-field-initializers -pedantic -Wno-long-long -Wno-maybe-uninitialized -Wnon-virtual-dtor -Wno-comment -std=c++11 -ffunction-sections -fdata-sections -fno-common -Woverloaded-virtual -Wcast-qual -fno-strict-aliasing -pedantic -Wno-long-long -Wall -W -Wno-unused-parameter -Wwrite-strings -Wno-unused-local-typedefs  -Wl,-O3  -Wl,-z,defs -shared -Wl,-soname,libclingJupyter.so -o $LIBDIR/libclingJupyter.so Kernel.cpp.o $LIBDIR/libclangAST.a $LIBDIR/libclangBasic.a $LIBDIR/libclangCodeGen.a $LIBDIR/libclangDriver.a $LIBDIR/libclangFrontend.a $LIBDIR/libclangLex.a $LIBDIR/libclangParse.a $LIBDIR/libclangSema.a $LIBDIR/libclangSerialization.a $LIBDIR/libclingUserInterface.a $LIBDIR/libclingMetaProcessor.a $LIBDIR/libclingInterpreter.a $LIBDIR/libclingUtils.a $LIBDIR/libLLVMCore.a $LIBDIR/libLLVMSupport.a $LIBDIR/libLLVMMCJIT.a $LIBDIR/libLLVMOrcJIT.a $LIBDIR/libLLVMExecutionEngine.a $LIBDIR/libLLVMRuntimeDyld.a $LIBDIR/libLLVMX86AsmParser.a $LIBDIR/libLLVMX86CodeGen.a $LIBDIR/libLLVMAsmPrinter.a $LIBDIR/libLLVMSelectionDAG.a $LIBDIR/libLLVMCodeGen.a $LIBDIR/libLLVMTarget.a $LIBDIR/libLLVMX86Desc.a $LIBDIR/libLLVMX86AsmPrinter.a $LIBDIR/libLLVMX86Utils.a $LIBDIR/libLLVMX86Disassembler.a $LIBDIR/libLLVMX86Info.a $LIBDIR/libLLVMMCDisassembler.a $LIBDIR/libclangCodeGen.a $LIBDIR/libclangFrontend.a $LIBDIR/libclangDriver.a $LIBDIR/libclangParse.a $LIBDIR/libclangSerialization.a $LIBDIR/libclangSema.a $LIBDIR/libclangAnalysis.a $LIBDIR/libLLVMOption.a $LIBDIR/libclangEdit.a $LIBDIR/libclangAST.a $LIBDIR/libclangLex.a $LIBDIR/libclangBasic.a $LIBDIR/libLLVMBitWriter.a $LIBDIR/libLLVMipo.a $LIBDIR/libLLVMVectorize.a $LIBDIR/libLLVMIRReader.a $LIBDIR/libLLVMAsmParser.a $LIBDIR/libLLVMInstrumentation.a $LIBDIR/libLLVMLinker.a $LIBDIR/libLLVMObjCARCOpts.a $LIBDIR/libLLVMScalarOpts.a $LIBDIR/libLLVMInstCombine.a $LIBDIR/libLLVMProfileData.a $LIBDIR/libLLVMObject.a $LIBDIR/libLLVMBitReader.a $LIBDIR/libLLVMMCParser.a $LIBDIR/libLLVMMC.a $LIBDIR/libLLVMTransformUtils.a $LIBDIR/libLLVMipa.a $LIBDIR/libLLVMAnalysis.a $LIBDIR/libLLVMCore.a $LIBDIR/libLLVMSupport.a -lrt -ldl -latomic -lpthread -lm -Wl,-rpath,"\$ORIGIN/../lib" 

# Now install the kernel itself.
cd $SRCDIR/tools/cling/tools/Jupyter/kernel
pip install .
jupyter kernelspec install cling
cp scripts/jupyter-cling-kernel $BINDIR

# Cleanup.
# We don't need any of the binaries or libs except libclingJupyter.so
apk del git
cd $WORKDIR
rm -rf $SRCDIR
rm -rf $BUILDDIR
rm $BINDIR/clang*
rm $BINDIR/cling
rm $BINDIR/llvm-tblgen
rm $LIBDIR/libclang*.a
rm $LIBDIR/libcling*.a
rm $LIBDIR/libLLVM*.a

popd
